#!/bin/bash

DOTDIR=$HOME/dotfiles

CLEAN=0
FULL=(prezto neovim weechat mutt ssh chef tmux dev)
MAC_MIN=(prezto tmux_macosx vim dev minimal)
MIN=(prezto tmux_linux vim dev minimal)

prezto() {
  ln -s "$DOTDIR/prezto" $HOME/.zprezto

  FILES=(zlogout zlogin zprofile zshrc zpreztorc zshenv)
  for i in ${FILES[@]}; do
    ln -s "$HOME/.zprezto/runcoms/$i" "$HOME/.$i"
    if [ $CLEAN == 1 ]; then
      rm -f "$HOME/.$i"
    fi
  done

  if [ $CLEAN == 1 ]; then
    rm -f "$HOME/.zprezto"
  fi
}

fixycm() {
  # https://github.com/Valloric/YouCompleteMe/issues/18
  brew rm -f python
  brew rm -f macvim
  brew install python
  brew linkapps python
  brew install macvim --with-python --override-system-vim
  brew linkapps macvim
  cd /System/Library/Frameworks/Python.framework/Versions/
  # make sure System Integrity is first disabled
  # reboot, Cmd+r (to get to recovery mode), Terminal, `csrutil disable; reboot`
  sudo ln -s /usr/local/Cellar/python/<CURRENT VERSION>Frameworks/Python.framework/Versions/Current Current
  cd ~/.vim/bundle/YouCompleteMe
  ./install.sh --clang-completer
}

virtualenv() {
  # guide from https://hackercodex.com/guide/python-development-environment-on-mac-osx/
  easy_install pip
  pip install virtualenv
  mkdir -p /Virtualenvs
  cd ~/Virtualenvs
  virtualenv default
  source ~/Virtualenvs/default/bin/activate
}

vim() {
  # setup vim
  FILES=(vimrc vimrc.min)
  ln -s "$DOTDIR/dotvim" $HOME/.vim
  for i in ${FILES[@]}; do
    ln -s "$HOME/.vim/$i" "$HOME/.$i"
    if [ $CLEAN == 1 ]; then
      rm -f "$HOME/.$i"
    fi
  done

  if [ $CLEAN == 1 ]; then
    echo "Vim removed"
  else
    echo "Launch VIM and don't forget install plugins"
    echo "   :PluginInstall"
  fi
}

neovim() {
# https://github.com/ZyX-I/neovim/blob/42047acb4f07c689936b051864c6b4448b1b6aa1/runtime/doc/nvim_from_vim.txt#L12-L18
  # setup neovim
  mkdir -p ${XDG_CONFIG_HOME:=$HOME/.config}
  ln -s "$DOTDIR/dotvim" $XDG_CONFIG_HOME/nvim
  ln -s $HOME/.vim/vimrc $XDG_CONFIG_HOME/nvim/init.vim
  if [ $CLEAN == 1 ]; then
    rm -f "$XDG_CONFIG_HOME/nvim"
  fi

  # pip from virtualenv
  virtualenv
  pip install neovim
  echo "Add path to Python bin"
  echo "let g:python_host_prog = '/path/to/python'"

  if [ $CLEAN == 1 ]; then
    echo "Vim removed"
  else
    echo "Launch VIM and don't forget install plugins"
    echo "   :PluginInstall"
  fi
}

weechat(){
  # setup weechat
  ln -s "$DOTDIR/dotweechat" $HOME/.weechat
  if [ $CLEAN == 1 ]; then
    rm -f "$HOME/.weechat"
  fi
}

mutt(){
  # setup mutt
  ln -s "$DOTDIR/dotmutt" $HOME/.mutt
  FILES=(mailcap msmtprc muttrc offlineimaprc urlview)
  for i in ${FILES[@]}; do
    ln -s "$HOME/.mutt/$i" "$HOME/.$i"
    if [ $CLEAN == 1 ]; then
      rm -f "$HOME/.$i"
    fi
  done

  if [ $CLEAN == 1 ]; then
    rm -f "$HOME/.mutt"
  fi
}

ssh(){
  # setup ssh
  ln -s "$DOTDIR/dotssh" $HOME/.ssh
  if [ $CLEAN == 1 ]; then
    rm -f "$HOME/.ssh"
  fi
}

chef(){
  ln -s "$DOTDIR/dotchef" $HOME/.chef
  if [ $CLEAN == 1 ]; then
    rm -f "$HOME/.chef"
  fi
}

tmux_macosx(){
  # setup tmux
  # with 24-bit color support
  # https://www.reddit.com/r/vim/comments/2ozwe4/24_bit_vim_in_osx_iterm2_a_reality/
  brew uninstall tmux
  brew tap choppsv1/term24
  brew install choppsv1/term24/tmux

  ln -s $DOTDIR/tmux.osx.conf $HOME/.tmux.conf
  if [ $CLEAN == 1 ]; then
    rm -f "$HOME/.tmux.conf"
  fi
}

tmux_linux(){
  # setup tmux
  ln -s $DOTDIR/tmux.linux.conf $HOME/.tmux.conf
  if [ $CLEAN == 1 ]; then
    rm -f "$HOME/.tmux.conf"
  fi
}

dev() {
  # setup git and development enviroment
  FILES=(gitconfig rspec tigrc gist)
  for i in ${FILES[@]}; do
    ln -s "$DOTDIR/$i" "$HOME/.$i"
    if [ $CLEAN == 1 ]; then
      rm -f "$HOME/.$i"
    fi
  done

  # hub
  mkdir -p ~/.config

  ln -s $HOME/$DOTDIR/hub $HOME/.config/hub
  if [ $CLEAN == 1 ]; then
    rm -f $HOME/.config/hub
  fi
}

minimal(){
  # gate for minimal install
  touch $HOME/.minimal_shell
  if [ $CLEAN == 1 ]; then
    rm -f "$HOME/.minimal_shell"
  fi
}

runner(){
  name=$1[@]
  prompt=$2
  a=("${!name}")

  for i in "${a[@]}" ; do
    if [ $prompt ]; then
      echo "do you wish to remove $i?"
      select yn in "yes" "no"; do
          case $yn in
              yes ) $i;;
              no ) exit;;
          esac
      done
    else
      $i
    fi
  done
}

if [[ $1 == "full" ]]; then
  runner FULL
else
  if [ "$(uname -s)" = 'Darwin' ] && [ -z "$BREW_LOCATION" ]; then
    runner MAC_MIN
  else
    runner MIN
  fi
fi

if [[ $1 == "clean" ]]; then
  CLEAN=1
  runner FULL $CLEAN
fi
